apiVersion: v1
kind: Namespace
metadata:
  name: gitea
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitea-storage
  namespace: gitea
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: do-block-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitea
  namespace: gitea
  labels:
    app: gitea
spec:
  replicas: 1
  template:
    metadata:
      name: gitea
      labels:
        app: gitea
    spec:
      containers:
      - name: gitea
        image: gitea/gitea:latest
        imagePullPolicy: Always
        env:
          - name: INSTALL_LOCK
            value: "false"
          - name: APP_NAME
            value: "tulpa.dev: git in plurality"
          - name: SSH_DOMAIN
            value: git.tulpa.dev
        volumeMounts:
          - mountPath: "/data"
            name: "data"
        ports:
          - containerPort: 22
            name: ssh
            protocol: TCP
          - containerPort: 3000
            name: http
            protocol: TCP
      restartPolicy: Always
      volumes:
        # Set up a data directory for gitea
        # For production usage, you should consider using PV/PVC instead(or simply using storage like NAS)
        # For more details, please see https://kubernetes.io/docs/concepts/storage/volumes/
      - name: "data"
        persistentVolumeClaim:
          claimName: gitea-storage
  selector:
    matchLabels:
      app: gitea
---
# Using cluster mode
apiVersion: v1
kind: Service
metadata:
  name: gitea-web
  namespace: gitea
  labels:
    app: gitea
  annotations:
    external-dns.alpha.kubernetes.io/hostname: tulpa.dev
    external-dns.alpha.kubernetes.io/ttl: "120" #optional
    external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
spec:
  ports:
  - port: 80
    targetPort: 3000
    name: http
  selector:
    app: gitea
---
# Using node-port mode
# This mainly open a specific TCP port for SSH usage on each host,
# so you can use a proxy layer to handle it(e.g. slb, nginx)
apiVersion: v1
kind: Service
metadata:
  name: gitea-ssh
  namespace: gitea
  labels:
    app: gitea-ssh
  annotations:
    external-dns.alpha.kubernetes.io/hostname: ssh.tulpa.dev
    external-dns.alpha.kubernetes.io/ttl: "120" #optional
    external-dns.alpha.kubernetes.io/cloudflare-proxied: "false"
spec:
  ports:
  - port: 22
    targetPort: 22
    name: ssh
  selector:
    app: gitea
---
# Ingress is always suitable for HTTP usage,
# we suggest using an proxy layer such as slb to send traffic to different ports.
# Usually 80/443 for web and 22 directly for SSH.
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gitea
  namespace: gitea
  annotations:
    kubernetes.io/ingress.class: nginx
    certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
spec:
  rules:
  - host: tulpa.dev
    http:
      paths:
      - backend:
          serviceName: gitea-web
          servicePort: 80
